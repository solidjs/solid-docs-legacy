{"id":"counterstore","files":[{"name":"main","type":"jsx","content":"import { render } from \"solid-js/web\";\nimport { CounterProvider, useCounter } from \"CounterStore.tsx\";\n\nconst MiddleComponent = () => <NestedComponent />;\n\nconst NestedComponent = () => {\n  const [count, { increment, decrement }] = useCounter();\n  return (\n    <>\n      <p>{count()}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </>\n  );\n};\n\nconst App = () => (\n  <CounterProvider count={7}>\n    <MiddleComponent />\n  </CounterProvider>\n);\n\nrender(App, document.getElementById(\"app\"));"},{"name":"CounterStore","type":"jsx","content":"import { createSignal, createContext, useContext, Component } from \"solid-js\";\n\ntype CounterStore = [\n  () => number,\n  { increment?: () => void; decrement?: () => void }\n];\n\nconst CounterContext = createContext<CounterStore>([() => 0, {}]);\n\nexport const CounterProvider: Component<{ count: number }> = props => {\n  const [count, setCount] = createSignal(props.count || 0),\n    store: CounterStore = [\n      count,\n      {\n        increment() {\n          setCount(c => c + 1);\n        },\n        decrement() {\n          setCount(c => c - 1);\n        }\n      }\n    ];\n\n  return (\n    <CounterContext.Provider value={store}>\n      {props.children}\n    </CounterContext.Provider>\n  );\n};\n\nexport function useCounter() {\n  return useContext(CounterContext);\n}"}]}