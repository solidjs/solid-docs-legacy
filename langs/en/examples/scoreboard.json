{"id":"scoreboard","name":"Complex/Scoreboard","description":"Make use of hooks to do simple transitions","files":[{"name":"main","type":"jsx","content":"import {\n\tcreateMemo,\n\tcreateSignal,\n\tcreateComputed,\n\tonCleanup,\n\tFor\n} from \"solid-js\";\nimport { createStore } from \"solid-js/store\";\nimport { render } from \"solid-js/web\";\n\nconst App = () => {\n\tlet newName, newScore;\n\tconst [state, setState] = createStore({\n\t\t\tplayers: [\n\t\t\t\t{ name: \"Mark\", score: 3 },\n\t\t\t\t{ name: \"Troy\", score: 2 },\n\t\t\t\t{ name: \"Jenny\", score: 1 },\n\t\t\t\t{ name: \"David\", score: 8 }\n\t\t\t]\n\t\t}),\n\t\tlastPos = new WeakMap(),\n\t\tcurPos = new WeakMap(),\n\t\tgetSorted = createMemo((list = []) => {\n\t\t\tlist.forEach((p, i) => lastPos.set(p, i));\n\t\t\tconst newList = state.players.slice().sort((a, b) => {\n\t\t\t\tif (b.score === a.score) return a.name.localeCompare(b.name); // stabalize the sort\n\t\t\t\treturn b.score - a.score;\n\t\t\t});\n\t\t\tlet updated = newList.length !== list.length;\n\t\t\tnewList.forEach(\n\t\t\t\t(p, i) => lastPos.get(p) !== i && (updated = true) && curPos.set(p, i)\n\t\t\t);\n\t\t\treturn updated ? newList : list;\n\t\t}),\n\t\thandleAddClick = () => {\n\t\t\tconst name = newName.value,\n\t\t\t\tscore = +newScore.value;\n\t\t\tif (!name.length || isNaN(score)) return;\n\t\t\tsetState(\"players\", (p) => [...p, { name: name, score: score }]);\n\t\t\tnewName.value = newScore.value = \"\";\n\t\t},\n\t\thandleDeleteClick = (player) => {\n\t\t\tconst idx = state.players.indexOf(player);\n\t\t\tsetState(\"players\", (p) => [...p.slice(0, idx), ...p.slice(idx + 1)]);\n\t\t},\n\t\thandleScoreChange = (player, { target }) => {\n\t\t\tconst score = +target.value;\n\t\t\tconst idx = state.players.indexOf(player);\n\t\t\tif (isNaN(+score) || idx < 0) return;\n\t\t\tsetState(\"players\", idx, \"score\", score);\n\t\t},\n\t\tcreateStyles = (player) => {\n\t\t\tconst [style, setStyle] = createSignal();\n\t\t\tcreateComputed(() => {\n\t\t\t\tgetSorted();\n\t\t\t\tconst offset = lastPos.get(player) * 18 - curPos.get(player) * 18,\n\t\t\t\t\tt = setTimeout(() =>\n\t\t\t\t\t\tsetStyle({ transition: \"250ms\", transform: null })\n\t\t\t\t\t);\n\t\t\t\tsetStyle({\n\t\t\t\t\ttransform: `translateY(${offset}px)`,\n\t\t\t\t\ttransition: null\n\t\t\t\t});\n\t\t\t\tonCleanup(() => clearTimeout(t));\n\t\t\t});\n\t\t\treturn style;\n\t\t};\n\n\treturn (\n\t\t<div id=\"scoreboard\">\n\t\t\t<div class=\"board\">\n\t\t\t\t<For each={getSorted()}>\n\t\t\t\t\t{(player) => {\n\t\t\t\t\t\tconst getStyles = createStyles(player),\n\t\t\t\t\t\t\t{ name } = player;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div class=\"player\" style={getStyles()}>\n\t\t\t\t\t\t\t\t<div class=\"name\">{name}</div>\n\t\t\t\t\t\t\t\t<div class=\"score\">{player.score}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t</For>\n\t\t\t</div>\n\t\t\t<form class=\"admin\">\n\t\t\t\t<For each={state.players}>\n\t\t\t\t\t{(player) => {\n\t\t\t\t\t\tconst { name, score } = player;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div class=\"player\">\n\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclass=\"score\"\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tvalue={score}\n\t\t\t\t\t\t\t\t\tonInput={[handleScoreChange, player]}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={[handleDeleteClick, player]}>\n\t\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t</For>\n\t\t\t\t<div class=\"player\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tplaceholder=\"New player...\"\n\t\t\t\t\t\tref={newName}\n\t\t\t\t\t/>\n\t\t\t\t\t<input class=\"score\" type=\"number\" name=\"score\" ref={newScore} />\n\t\t\t\t\t<button type=\"button\" onClick={handleAddClick}>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nrender(App, document.getElementById(\"app\"));"}]}