{"id":"ethasketch","name":"Complex/Etch A Sketch","description":"Uses Index and createMemo to create a grid graphic","files":[{"name":"main","type":"tsx","content":"// Project idea from https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/etch-a-sketch-project\nimport { render } from \"solid-js/web\";\nimport { createSignal, createMemo, Index } from \"solid-js\";\n\nimport \"./styles.css\";\n\nconst maxGridPixelWidth = 500;\n\nfunction randomHexColorString(): string {\n  return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nfunction clampGridSideLength(newSideLength: number): number {\n  return Math.min(Math.max(newSideLength, 0), 100);\n}\n\nfunction EtchASketch() {\n  const [gridSideLength, setGridSideLength] = createSignal(10);\n  const gridTemplateString = createMemo(\n    () =>\n      `repeat(${gridSideLength()}, ${maxGridPixelWidth / gridSideLength()}px)`\n  );\n\n  return (\n    <>\n      <div>\n        <label>Grid Side Length: </label>\n        <input\n          type=\"number\"\n          value={gridSideLength()}\n          onInput={(e) =>\n            setGridSideLength(\n              clampGridSideLength(e.currentTarget.valueAsNumber)\n            )\n          }\n        />\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          \"grid-template-rows\": gridTemplateString(),\n          \"grid-template-columns\": gridTemplateString(),\n        }}\n      >\n        <Index\n          each={Array.from({ length: gridSideLength() ** 2 })}\n          fallback={\"Input a grid side length.\"}\n        >\n          {() => (\n            <div\n              class=\"cell\"\n              onMouseEnter={(event) => {\n                const eventEl = event.currentTarget;\n\n                eventEl.style.backgroundColor = randomHexColorString();\n\n                setTimeout(() => {\n                  eventEl.style.backgroundColor = \"initial\";\n                }, 500);\n              }}\n            ></div>\n          )}\n        </Index>\n      </div>\n    </>\n  );\n}\n\nrender(() => <EtchASketch />, document.getElementById(\"app\"));\n"},{"name":"styles","type":"css","content":".cell {\n  outline: 1px solid #1f1f1f;\n}\n\n.dark .cell {\n  outline: 1px solid #efefef;\n}\n"}]}