{"id":"forms","name":"Basic/Form Validation","description":"HTML 5 validators with custom async validation","files":[{"name":"main","type":"jsx","content":"// @ts-nocheck\nimport { render } from \"solid-js/web\";\nimport { createStore } from \"solid-js/store\";\nimport { useForm } from \"./validation\";\nimport \"./styles.css\";\n\nconst EMAILS = [\"johnsmith@outlook.com\", \"mary@gmail.com\", \"djacobs@move.org\"];\n\nfunction fetchUserName(name) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(EMAILS.indexOf(name) > -1), 200);\n  });\n}\n\nconst ErrorMessage = (props) => <span class=\"error-message\">{props.error}</span>;\n\nconst App = () => {\n  const { validate, formSubmit, errors } = useForm({\n    errorClass: \"error-input\"\n  });\n  const [fields, setFields] = createStore();\n  const fn = (form) => {\n    // form.submit()\n    console.log(\"Done\");\n  };\n  const userNameExists = async ({ value }) => {\n    const exists = await fetchUserName(value);\n    return exists && `${value} is already being used`;\n  };\n  const matchesPassword = ({ value }) =>\n    value === fields.password ? false : \"Passwords must Match\";\n\n  return (\n    <form use:formSubmit={fn}>\n      <h1>Sign Up</h1>\n      <div class=\"field-block\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          use:validate={[userNameExists]}\n        />\n        {errors.email && <ErrorMessage error={errors.email} />}\n      </div>\n      <div class=\"field-block\">\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          required=\"\"\n          minlength=\"8\"\n          onInput={(e) => setFields(\"password\", e.target.value)}\n          use:validate\n        />\n        {errors.password && <ErrorMessage error={errors.password} />}\n      </div>\n      <div class=\"field-block\">\n        <input\n          type=\"password\"\n          name=\"confirmpassword\"\n          placeholder=\"Confirm Password\"\n          required=\"\"\n          use:validate={[matchesPassword]}\n        />\n        {errors.confirmpassword && (\n          <ErrorMessage error={errors.confirmpassword} />\n        )}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nrender(App, document.getElementById(\"app\"));\n"},{"name":"validation","type":"jsx","content":"import { createStore } from \"solid-js/store\";\n\nfunction checkValid({ element, validators = [] }, setErrors, errorClass) {\n  return async () => {\n    element.setCustomValidity(\"\");\n    element.checkValidity();\n    let message = element.validationMessage;\n    if (!message) {\n      for (const validator of validators) {\n        const text = await validator(element);\n        if (text) {\n          element.setCustomValidity(text);\n          break;\n        }\n      }\n      message = element.validationMessage;\n    }\n    if (message) {\n      errorClass && element.classList.toggle(errorClass, true);\n      setErrors({ [element.name]: message });\n    }\n  };\n}\n\nexport function useForm({ errorClass }) {\n  const [errors, setErrors] = createStore({}),\n    fields = {};\n\n  const validate = (ref, accessor) => {\n    const validators = accessor() || [];\n    let config;\n    fields[ref.name] = config = { element: ref, validators };\n    ref.onblur = checkValid(config, setErrors, errorClass);\n    ref.oninput = () => {\n      if (!errors[ref.name]) return;\n      setErrors({ [ref.name]: undefined });\n      errorClass && ref.classList.toggle(errorClass, false);\n    };\n  };\n\n  const formSubmit = (ref, accessor) => {\n    const callback = accessor() || (() => {});\n    ref.setAttribute(\"novalidate\", \"\");\n    ref.onsubmit = async (e) => {\n      e.preventDefault();\n      let errored = false;\n\n      for (const k in fields) {\n        const field = fields[k];\n        await checkValid(field, setErrors, errorClass)();\n        if (!errored && field.element.validationMessage) {\n          field.element.focus();\n          errored = true;\n        }\n      }\n      !errored && callback(ref);\n    };\n  };\n\n  return { validate, formSubmit, errors };\n}\n"},{"name":"styles","type":"css","content":"input {\n  display: inline-block;\n  padding: 4px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.error-message {\n  color: red;\n  padding: 8px;\n}\n.error-input {\n  box-shadow: 0px 0px 2px 1px red;\n}"}]}